<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[《 希望你认准自己的路，努力生活》推文思考]]></title>
    <url>%2F2018%2F12%2F16%2F%E3%80%8A-%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%AE%A4%E5%87%86%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B7%AF%EF%BC%8C%E5%8A%AA%E5%8A%9B%E7%94%9F%E6%B4%BB%E3%80%8B%E6%8E%A8%E6%96%87%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[前言今天看到一篇微信推文，感觉很有道理，就摘取了其中的一些重点句子出来，方便自己后续查看。如有侵权，请联系作者尽快删除。 正文 人生可走的路太多了，每个人的选择都有吸引力，但每个人的选择也都有取舍。如果只盯着别人拥有的，质问自己没有的，那日子永远都不会快乐。 你看，我们好像都忽略了自己拥有的，然后拼命羡慕别人拥有的，却没有看到别人没能说出口和无人理解的心酸。 每个人都有适合自己的路要走，都有相比之下更在意的东西，都在为自己想要的做出取舍，付出努力。鱼和熊掌不可兼得，你想要远方就不要羡慕别人的一蔬一饭，你想要自由就要拿更多禁锢去换。 二十岁刚出头的年级，请把自己摆在二十岁出头的位置上。你没有理由也没有能力去拥有一个四十岁的人拥有的阅历和财富，你除了手头的青春你一无所有，但就是你手头上这位数不多的东西，能决定你是一个怎么样的人。 希望你看清生活的真相之后能找到属于自己的路，不要盲目羡慕也不要轻易追逐，浮于水面的体面都是别人选择让你看到的，羡慕之前先想下一藏在水下的努力和心酸。 认准自己想走的路，心无旁骛地去走就对了，做好自己远比模仿别人有价值。 人生要自己选择，由此产生的责任也全部自己承担，这才叫活着 总结回首前二十年，我自己何尝不是呢？小时候跟别人比玩具，读书时跟别人比成绩、比努力，长大了跟别人比成就、比工作、比金钱、比帅气……事事跟别人比较，什么都要跟别人比，那其实都是想做别人，不是做自己啊。不过还是要努力啊！]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>读书</tag>
        <tag>微信推文</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F15%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网易Java高级工程师交流②微信群问题收集]]></title>
    <url>%2F2018%2F12%2F02%2F%E7%BD%91%E6%98%93Java%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E4%BA%A4%E6%B5%81%E2%91%A1%E5%BE%AE%E4%BF%A1%E7%BE%A4%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86%2F</url>
    <content type="text"><![CDATA[前言这个是网易Java高级工程师交流②微信群的问题收集，写这篇博客主要是为了方便自己记忆和总结。如有侵权，请联系作者尽快删除。 2018-11-09Aredis 官方推荐用 redisson实现分布式锁 A我们的项目就是我们的真实案例，是脱敏之后的 2018-11-10Q分线程执行的顺序按有序执行的么 A 代码中，start方法的调用顺序，不代表线程的执行顺序， Q课上的例子，把锁加在OrderCodeGenerator是不是就不用分布式锁了？ A ordercode订单号生成的系统服务 这个，单台机器扛不住压力，肯定是集群的。所以，你这把锁 加了也没用。 那么集群的OrderCodeGenerator又是如何产生全局自增id的，Server间如何同步的。分布式id是不是做不到sequential，只能做到uuid ID生成策略，有集群下保证唯一的方式。昨晚的例子，主要是讲分布式锁。 Q秒杀都是先到先得吗 A 不是先到先得，是系统处理到谁就是谁 [ ] 前面在课堂上，说给大家分享我的nginx最精简配置文件。需要的扣1。 QJava核心技术这本书好，还是偏程思想 A 先啃Java编程思想或者核心技术的前几章的基础，会比较好，不然一步一报错，更难受。而且你去面试，他们都是问你为什么，而不是怎么用，然后当你知道为什么，你也能将知识串联起来，记得更牢 Q面试造飞机，工作拧螺丝 A 拧螺丝你也要知道规格和扭矩，别拧坏了。而且，让你进来，也是想你可以以后造飞船的，但不是进来进让你握住公司核心。 基础不牢的人，写的代码，简单的代码也是很好玩的。。 Q请问一下群里有没有做过配置文件加密的呢 A 搜索Config.hcl ？ Qjava反射重要么？工作中重要么 A 重要 很多框架里面都依赖java的反射机制的阿 Q是不是工作的时候mapper之类的文件都是生成的不用自己写 A 都是代码生成器 你们用rundeck嘛 大佬自己搞 我们改改用的 Q30多岁好找工作吗 A 压力好大好大。我现在的困境是，大公司做不上领导，小公司不想去 你想想，哪个行业不喜欢年轻力壮的。但是人就这么多，总归还是能干活就行。@Java0年julian 大公司，没机会，就努力积攒自己的能力。一有机会，逮住不放手。厚积薄发 @Java0年julian 人为什么感到焦虑,因为对未来感到迷茫 . 根本原因是没有计划 还有就是，信心不够 Q今晚了解了异步的分布式技术，那如果要求同步的，该怎么处理呢 Q这么贵是面授吗？ A 面授，你的三万起了 如果是不付出就有收获程序员不都得两万起步的工资。学习是投资。 通过深入学习，如果进入互联网大厂，一个月的薪水涨幅应该就会超过这个学费。 2018-11-17A人在世上，如果仅仅是为了自己孤零零的活着，那应该是可以潇洒但如果想留下点什么，简直是要命。。 Q我很想问下啊，大家经常用redis来做个缓存，减少数据库的压力。那么redis怎么跟数据库之间的数据同步啊，常用的一个场景就是，我们查询数据库之前先去查redis，如果redis有就直接返回了，那怎么保证redis的数据跟数据库的一致而不至于返回了一个过时的数据呢 A 最终一致性了解一下 关于缓存的问题看到一偏好文章 Q问下各位大佬 你们公司MQ用的是哪一个?ActiveMQ or RabbitMQ A ActiveMQ 2018-11-19A 使用JWT存在个问题，就是单用户可以多端多个token同时访问 需求是只一端能登录，所以token还是要存起来 在自己的系统里做好设置和判断就可以了，需求多开就允许多开，需求不允许就把老的token踢掉 2018-11-21Q遇到薅羊毛的该怎么做 A 遇到薅羊毛的该怎么做 2018-11-22Qjava.security.NoSuchAlgorithmException: Cannot find any provider supporting AES/CBC/PKCS7Padding。各位大佬 我在本地测试 解密微信userinfo时 是成功的 , 但是一到测试服就报这个错误 A 这是java出口安全机制的问题 最长128位 你换成256即可 我是在做微信支付退款的时候 解析微信的密文出现这个情况的。@BEnny 修改jdk 的配置就好了 微信接口开发_退款结果通知API Java语言描述。@BEnny 这个博客里面有解决办法 和 jar包的下载地址 你先玩吧 大兄弟 这个造成的原因一样的, 由于美国出口限制 jdk的长度需要我们自己设置 2018-11-24Qmysql优化除了索引还有什么。。 A sql语句本身的优化吧 本质还是为了索引。避免全局扫描 那天好像老师说了分库分表吧，这也算吧。更深层次的，那就去改mysql的源码去了 这些不算了。很好奇面试问mysql优化怎么回答 硬件，软件，设计。这个思路回答，还有一些配置，其次才是sql优化 还要看具体什么场景，架构，业务等等 2018-11-28Q请教个问题，有用mysql的小伙伴吗，如果一张表的物理主键很长，会影响到索引吗？一般索引文件中会记录物理主键，记的应该是物理主键的引用地址吧，不是物理主键的值吧 A 你是说这个主键的值很长么。我记得建主键的一个原则就是字段要短吧，不能把大文本这样的建成主键 mysql对索引字段长度有限制的，700多个字符还是多少吧 不同版本索引长度限制不一样 之前一直以为mysql中索引文件是独立的文件，里面如果存物理主键的话，那物理主键的长度肯定会影响到索引文件的大小，但后来看到数据和索引在同一个文件里，那索引里的物理主键就不应该再存一份物理主键的值吧，只要存引用地址就可以了，这样是不是物理主键的长度大小对索引就没什么影响了 @南京-10-阿泰 对你那个问题，索引有2种，聚集索引是放在一个文件里面的，非聚集索引是分开放的。但是如果我们将一个长字段设置成索引的话，索引是方便查到这个位置，但是查到位置以后，要进行比较吧，长字段比较就慢了，所以我的理解是长字段不适合做索引 楼上你说的长字段是索引字段，还是物理主见字段 主键不是也会自动变成索引么？ 恩，如果是用主键的值去比较是会受到长度的影响，但主要存的是主键地址，不就不用比较了吗 2018-11-29A1.T4是什么，以及怎样的人能当腾讯T4？腾讯的员工职业发展过程当中，有两条通道可以选一条L线就是Leader，组长、总监、总经理。还有一条线，就是专业线T（技术族）、P（产品族）、M（市场族）。我个人看法，专业2级的核心关键词是胜任，3级的关键词是方法、4级的关键词是影响。5级和6级的关键词是啥我还真不知知道，但他们基本上都是技术VP或者是首席科学家般的存在，听老大说鹅厂曾经有过一位T6 孙国政，他是OCR（图片识别技术）的发明人。 T4的技术专家一方面在自己的技术领域有着开创性的贡献，另一方面大多主导过公司级的重点技术项目，再者为公司培养了一批T3或者以上的技术骨干。 作者：贺嘉链接：https://www.zhihu.com/question/29910703/answer/134468046来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。]]></content>
      <categories>
        <category>Java高级开发工程师直播公开课</category>
      </categories>
      <tags>
        <tag>问题收集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式之策略模式]]></title>
    <url>%2F2018%2F11%2F29%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[设计模式之策略模式前言这个是极客学院的 设计模式之策略模式，写这篇博客主要是为了方便自己记忆和总结。如有侵权，请联系作者尽快删除。 正文课程概要 设计模式入门 策略模式原理 策略模式示例演示 策略模式的注意点 设计模式入门 本课从总体上介绍设计模式的概念、用处和意义，并通过举例 Java IO 流的设计方式引入对模式的思考。 1、设计模式是人们在面对同类型软件工程设计问题所总结出的一些有用经验。模式不是代码，而是某类问题的通用设计解决方案 2、设计模式的本质目的是使软件工程在维护性、扩展性、变化性、复杂度方面成O(N) 3、OO（Object Oriented,面向对象）是原则，设计模式是具体方法、工具 举例：BufferedReader的设计 策略模式原理 本课从一个假想的模拟鸭子游戏项目的设计出发，通过遇到问题到思考解决方法，最后引出策略模式来解决问题。 继承的问题：对类的局部改动，尤其超类的局部改动，会影响其他部分。影响会有溢出效应 所谓溢出效应(Spillover Effect)，是指一个组织在进行某项活动时，不仅会产生活动所预期的效果，而且会对组织之外的人或社会产生的影响 超类挖的一个坑，每个子类都要来填，增加工作量，复杂度O(N^2)。不是好的设计模式 用策略模式来解决新需求需要新的设计方式，应对项目的扩展性，降低复杂度： 1）分析项目变化与不变部分，抽取变化部分，抽象成接口+实现； 2）鸭子哪些功能是会根据新需求变化的？叫声、飞行… 1、接口：123456781）public interface FlyBehavior &#123; void fly();&#125;2）public interface QuackBehavior &#123; void quack();&#125;; 3）好处：新增行为简单，行为类更好的复用，组合更方便。既有继承带来的复用好处，没有挖坑。 重新设计模拟鸭子项目1、重新设计的鸭子项目：12345678910111213141516171819202122232425262728293031public abstract class Duck &#123; FlyBehavior mFlyBehavior; QuackBehavior mQuackBehavior; public Duck() &#123; &#125; public void Fly() &#123; mFlyBehavior.fly(); &#125; public void Quack() &#123; mQuackBehavior.quack(); &#125; public abstract void display(); public void SetQuackBehavoir(QuackBehavior qb) &#123; mQuackBehavior = qb; &#125; public void SetFlyBehavoir(FlyBehavior fb) &#123; mFlyBehavior = fb; &#125; public void swim() &#123; System.out.println(&quot;~~im swim~~&quot;); &#125;&#125; 总结策略模式定义1、绿头鸭、石头鸭：1234567891011121314public class GreenHeadDuck extends Duck &#123; public GreenHeadDuck() &#123; mFlyBehavior = new GoodFlyBehavior(); mQuackBehavior = new GaGaQuackBehavior(); &#125; @Override public void display() &#123; // TODO Auto-generated method stub System.out.println(&quot;**GreenHead**&quot;); &#125;&#125; 2、策略模式：分别封装行为接口，实现算法族，超类里放行为接口对象，在子类里具体设定行为对象。原则就是：分离变化部分，封装接口，基于接口编程各种功能。此模式让行为算法的变化独立于算法的使用者。 策略模式示例演示 本课详细讲解以策略模式设计的模拟鸭子游戏类设计、接口设计等细节，并运行程序查看效果。 策略模式的注意点 本课总结上述涉及的几个关键点和注意点，再次梳理一下策略模式的思路。 1、分析项目中变化部分与不变部分2、多用组合少用继承；用行为类组合，而不是行为的继承。更有弹性3、设计模式有没有相应的库直接使用？有些库或框架本身就用某种设计模式设计的4、如果找不到适用的模式怎么办？对项目分析不够透彻或者项目奇怪只能用面向对象、基本原则、抽象、分析、设计超类、继承、子类来做了 源码下载(￣︶￣)↗[相关示例完整代码] 更多精彩文章请关注 个人博客：EdwardDrew]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《Java高级开发工程师》直播课-I系列-课时5：【实战篇】Spring框架源码中的设计模式]]></title>
    <url>%2F2018%2F11%2F28%2F%E3%80%90%E5%AE%9E%E6%88%98%E7%AF%87%E3%80%91Spring%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[前言这个是网易云课堂的《Java高级开发工程师》直播课I系列中的【实战篇】Spring框架源码中的设计模式，写这篇博客主要是为了方便自己记忆和总结。如有侵权，请联系作者尽快删除。 正文Spring框架源码中的设计模式 让你的代码更优雅 课程安排1、引子 ：代码重构时，那些代码中的坏味道 2、代码重构技巧 ：如何将设计模式运用在代码编写的过程中 3、Spring设计模式 ：结合Spring框架，讲解设计模式在顶级框架中的运用 4、设计模式结合 ：融合业务场景，学会设计模式的组合 01 引子书籍：《重构：改善既有代码的设计》22种代码中的坏味道：…… 注：外国书籍，翻译后的会有偏差，建议结合代码示意及英文表达综合理解 设计模式的学习前言设计模式，是前人根据自己的经验总结出来，代表了代码设计中的最佳实践 学习方式： 丰富编码经验 学习优秀开源框架的使用 02 利用设计模式设计你的代码有这么一个业务需求：用户-&gt;下订单-&gt;短信通知-&gt;微信通知 六大设计原则 单一职责原则（Single Responsiblity Principle SRP）：一个类只负责一个功能领域中的相应职责。高内聚、低耦合 开闭原则（Open Closed Principle，OCP）：对扩展开放，对修改关闭。不修改原有的代码情况下进行扩展。 里氏代换原则（Liskov Substitution Principle，LSP）：所有引用基类（父类）的地方必须能透明地使用其子类的对象。 依赖倒转原则（Dependency Inversion Principle，DIP）：抽象不应当依赖于细节，细节应当依赖于抽象。 接口隔离原则（Interface Segregation Principle，ISP）：接口拆分。当一个接口太大时，我们需要将它分割成一些更细小的接口。 迪米特法则（Principle of Least Knowledge，PLK）：减少依赖。一个软件实体应当尽可能少地与其他实体发生相互作用。 利用设计原则，作为衡量代码好坏的尺子。再选择合适的设计模式对代码进行设计 学习Spring框架的做法 观察者模式观察者模式：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。 又称：发布/订阅、消息通知机制、事件监听、事件驱动编程 利用观察者模式设计高拓展性的代码，利用Spring事件机制改造订单功能。 03看Spring框架源码中的设计模式模板方法模式定义一个算法的骨架，将骨架中的特定步骤延迟到子类中（注：特定步骤由子类实现）。 算法：代码运行的逻辑、顺序 骨架：没有完全实现，还没完成 模板方法模式使得子类不改变算法的结构即可重新定义该算法的某些特定步骤。 ==实战学习技巧==：优秀开源框架，根据命名规则去分析用到的设计模式 策略模式描述：策略模式定义了一系列的算法，并将每一个算法封装起来，而且使他们可以互相替换，让算法独立于使用它的客户而独立变化。 算法：程序运行的逻辑、顺序 封装：函数/方法、类、接口、抽象类 相互替换： 1)代表每一种算法，功能定义是一样的，具体实现不同。（同样是吃：人吃熟食、狼吃生肉） 2)JAVA中，可以直接替换的是接口实现、子类。类图大致如下： 总结 设计模式应用的两个步骤： 1、 根据设计原则衡量代码好坏。 2、选择合适的设计模式，对代码进行设计。 设计模式学习几点建议： 1、代码设计时，参考开源框架中类似的实现。 2、根据框架内部源码的实现，匹配到对应的设计模式。 3、利用拆分关键字的方式，学会分析设计模式的定义。 4、多写代码、多看源码、多想。 不为“模式”而用设计模式，你在不知不觉中就会用到。 源码下载(￣︶￣)↗[相关示例完整代码] 更多精彩文章请关注 个人博客：EdwardDrew]]></content>
      <categories>
        <category>Java高级开发工程师直播公开课</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好，Hexo]]></title>
    <url>%2F2018%2F11%2F26%2F%E4%BD%A0%E5%A5%BD%EF%BC%8CHexo%2F</url>
    <content type="text"><![CDATA[第一篇blog]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
